name: API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore GPInventory.sln
      
      - name: Build solution
        run: dotnet build GPInventory.sln --configuration Release --no-restore
      
      - name: Run unit tests
        run: dotnet test tests/GPInventory.Tests/GPInventory.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Run integration tests
        run: dotnet test tests/GPInventory.IntegrationTests/GPInventory.IntegrationTests.csproj --configuration Release --no-build --verbosity normal
      
      - name: Generate code coverage report
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/gp-inventory-api
          tags: |
            type=raw,value=latest
            type=sha,prefix=main-
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
      
      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ASPNETCORE_ENVIRONMENT=Production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Image digest
        run: echo "Image digest:" ${{ steps.docker_build.outputs.digest }}
